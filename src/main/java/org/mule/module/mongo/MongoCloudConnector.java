/**
 * Mule MongoDB Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */
package org.mule.module.mongo;

import org.mule.api.lifecycle.Initialisable;
import org.mule.api.lifecycle.InitialisationException;
import org.mule.module.mongo.api.MongoClient;
import org.mule.tools.cloudconnect.annotations.Connector;
import org.mule.tools.cloudconnect.annotations.Operation;
import org.mule.tools.cloudconnect.annotations.Parameter;
import org.mule.tools.cloudconnect.annotations.Property;

import java.util.List;

/**
 * A Mongo Connector Facade
 * @author flbulgarelli
 */
@Connector(namespacePrefix="mongo")
public class MongoCloudConnector implements Initialisable
{
    @Property(name = "client-ref", optional = true)
    private MongoClient client;
    
    /**
     * Lists names of collections available at this database
     * Example:
     * {@code <list-collections/>}
     * @return the list of names of collections available at this database
     */
    public List<String> listCollections()
    {
        return client.listCollections();
    }

    /**
     * Answers if a collection exists given its name
     * Example:
     * {@code <exists-collection name="aColllection"/>}
     * @param name the name of the colleciton
     * @return if the collection exists 
     */
    public boolean existsCollection(@Parameter String name)
    {
        return client.existsCollection(name);
    }

    /**
     * Deletes a collection and all the objects it contains. 
     * Example:
     * {@code <drop-collection name="aCollection"/>}
     * @param name the name of the collection to drop
     */
    public void dropCollection(@Parameter String name)
    {
        client.dropCollection(name);
    }

    /**
     * Example: {@code <create-collection name="aCollection" capped="true"/>}
     * 
     * @param name the name of the collection to create
     * @param capped if the collection will be capped TODO document its meaning
     * @param maxObject the maximum number of documents the new collection is able to
     *            contain
     * @param size the maximum size of the new collection TODO maximum?
     */
    public void createCollecton(@Parameter String name,
                                @Parameter(optional = true, defaultValue = "false") boolean capped,
                                @Parameter/* TODO optional */Integer maxObjects,
                                @Parameter/* TODO optional */Integer size)
    {
        client.createCollection(name, capped, maxObjects, size);
    }

    public void initialise() throws InitialisationException
    {
        // TODO Auto-generated method stub
    }
    
}
