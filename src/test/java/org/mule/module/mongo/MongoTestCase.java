/**
 * Mule MongoDB Cloud Connector
 *
 * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * The software in this package is published under the terms of the CPAL v1.0
 * license, a copy of which has been included with this distribution in the
 * LICENSE.txt file.
 */

/**
 * This file was automatically generated by the Mule Cloud Connector Development Kit
 */
package org.mule.module.mongo;

import static org.junit.Assert.fail;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import org.mule.module.mongo.api.MongoClient;
import org.mule.module.mongo.api.MongoClientImpl;
import org.mule.module.mongo.api.WriteConcern;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.Mongo;

import org.junit.Before;
import org.junit.Test;
public class MongoTestCase
{
    private static final String A_COLLECTION = "myCollection";
    private MongoClient client;
    private Mongo mongoMock;
    private DBCollection collectionMock;
    private DB dbMock;
    
    @Before
    public void setup()
    {
        //TODO remember that Mongo objects should be cached
        client = new MongoClientImpl();
        mongoMock = mock(Mongo.class);
        dbMock = mock(DB.class);
        collectionMock = mock(DBCollection.class);
        when(mongoMock.getDB("myDatabase")).thenReturn(dbMock);
    }
    
    /**Test {@link MongoClient#createCollection(String, boolean, Integer, Integer)}*/
    @Test
    public void createCollection()
    {
        client.createCollection(A_COLLECTION, false, 100, 45);
        verify(dbMock).getCollection(A_COLLECTION);
    }
    
    /**Test {@link MongoClient#listCollections()}*/
    @Test
    public void listCollections()
    {
        client.listCollections();
        verify(dbMock).getCollectionNames();
    }
    
    /**Test {@link MongoClient#existsCollection(String)}*/
    @Test
    public void existsCollection()
    {
        client.existsCollection(A_COLLECTION);
        verify(dbMock).collectionExists(A_COLLECTION);
    }
    
    /**Test {@link MongoClient#dropCollection(String)}*/
    @Test
    public void dropCollection()
    {
        client.dropCollection(A_COLLECTION);
        fail("Not yet implemented");
    }
    
    /**Test {@link MongoClient#insertObject(String, com.mongodb.DBObject, org.mule.module.mongo.api.WriteConcern)}*/
    @Test
    public void insertObject() throws Exception
    {
        BasicDBObject dbObject = new BasicDBObject();
        client.insertObject(A_COLLECTION, dbObject, WriteConcern.NONE);
        verify(collectionMock).insert(dbObject, com.mongodb.WriteConcern.NONE);
    }

    /**Test {@link MongoClient#countObjects(String, com.mongodb.DBObject)}*/
    @Test
    public void countObjectsWithQuery() throws Exception
    {
        BasicDBObject o = new BasicDBObject();
        client.countObjects(A_COLLECTION, o);
        verify(collectionMock).count(o);
    }
    
    /**Test {@link MongoClient#countObjects(String, com.mongodb.DBObject)}*/
    @Test
    public void countObjects() throws Exception
    {
        client.countObjects(A_COLLECTION, null);
        verify(collectionMock).count();
    }

    /**Test {@link MongoClient#updateObject(String, com.mongodb.DBObject, com.mongodb.DBObject, boolean, org.mule.module.mongo.api.WriteConcern)}*/
    @Test
    public void updateObject() throws Exception
    {
        DBObject query = new BasicDBObject();
        DBObject dbObject = new BasicDBObject();
        client.updateObject(A_COLLECTION, query , dbObject, false, WriteConcern.SAFE);
        verify(collectionMock).update(query, dbObject, false, false /*TODO*/, com.mongodb.WriteConcern.SAFE);
    }

    /**Test {@link MongoClient#createIndex(String, com.mongodb.DBObject)}*/
    @Test
    public void createIndex() throws Exception
    {
        BasicDBObject keys = new BasicDBObject();
        client.createIndex(A_COLLECTION, keys);
        verify(collectionMock).createIndex(keys);
    }
}
